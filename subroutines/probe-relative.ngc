o<probe-relative> sub

o<ensure-probe-ok> call

M70

G90
G61.1

#<startX> = #5420
#<startY> = #5421
#<startZ> = #5422

#<cmdX> = [ #<startX>+#1 ]
#<cmdY> = [ #<startY>+#2 ]
#<cmdZ> = [ #<startZ>+#3 ]

#<mag> = [ SQRT [ #1 * #1 + #2 * #2 + #3 * #3 ] ]
#<dirX> = [ #1 / #<mag> ]
#<dirY> = [ #2 / #<mag> ]
#<dirZ> = [ #3 / #<mag> ]

#<feedFast> = #4
#<feedBack> = #5
#<feedSlow> = #6

G4 P.1
G38.2 F#<feedFast> X[ #<cmdX> ] Y[ #<cmdY> ] Z[ #<cmdZ> ]

M66 P58 L0
o200 if [ ABS[ #5399-1 ] LT .000001 ]
  ; The probe will trip if it is in an error state, so check
  ; now to see if that's the case. This can prevent a crash
  ; if we weren't in an error start before the probe began
  ; but transition into an error start while probing.
  (abort,Probe is in an error state.)
o200 endif

#<fastTrippedX> = #5061
#<fastTrippedY> = #5062
#<fastTrippedZ> = #5063

G38.4 F#<feedBack> X[ #<startX> ] Y[ #<startY> ] Z[ #<startZ> ]
G91 G1 F#<feedBack> X[ -#<dirX>*.001 ] Y[ -#<dirY>*.001 ] Z[ -#<dirZ>*.001 ]
G90
G38.2 F#<feedSlow> X[ #<fastTrippedX> ] Y[ #<fastTrippedY> ] Z[ #<fastTrippedZ> ]

M66 P58 L0
o300 if [ ABS[ #5399-1 ] LT .000001 ]
  ; The probe will trip if it is in an error state, so check
  ; now to see if that's the case. This can prevent a crash
  ; if we weren't in an error start before the probe began
  ; but transition into an error start while probing.
  (abort,Probe is in an error state.)
o300 endif

G30.1 ; Save the current position into #5181-5189
o<set_probe_direction> call [#<dirX>] [#<dirY>] [#<dirZ>]

#<_probedG5X_X> = [ #5061 + #<_probe_compensation_x> ]
#<_probedG5X_Y> = [ #5062 + #<_probe_compensation_y> ]
#<_probedG5X_Z> = [ #5063 + #<_probe_compensation_z> ]

#<_probedRelativeX> = [ #5061 + #<_probe_compensation_x> - #<startX> ]
#<_probedRelativeY> = [ #5062 + #<_probe_compensation_y> - #<startY> ]
#<_probedRelativeZ> = [ #5063 + #<_probe_compensation_z> - #<startZ> ]

G1 F#<feedFast> X[ #<startX> ] Y[ #<startY> ] Z[ #<startZ> ]

M72
o<probe-relative> endsub
M2
